{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useRendererSelector = void 0;\n\nvar react_1 = require(\"react\");\n\nvar state_1 = require(\"../state\");\n/**\n * Custom Hook for loading the current document into context\n */\n\n\nexports.useRendererSelector = function () {\n  var _a = react_1.useContext(state_1.DocViewerContext).state,\n      currentDocument = _a.currentDocument,\n      pluginRenderers = _a.pluginRenderers;\n\n  var _b = react_1.useState(),\n      CurrentRenderer = _b[0],\n      setCurrentRenderer = _b[1];\n\n  react_1.useEffect(function () {\n    if (!currentDocument) return; // Do not advance if the document does not yet have a fileType\n    // This prevents prematurely showing 'no renderer' message\n\n    if (!currentDocument.fileType) {\n      setCurrentRenderer(undefined);\n      return;\n    }\n\n    var matchingRenderers = [];\n    pluginRenderers === null || pluginRenderers === void 0 ? void 0 : pluginRenderers.map(function (r) {\n      if (currentDocument.fileType === undefined) return;\n\n      if (r.fileTypes.indexOf(currentDocument.fileType) >= 0) {\n        matchingRenderers.push(r);\n      }\n    }); // Compute prefered Renderer based on weight\n\n    var SelectedRenderer = matchingRenderers.sort(function (a, b) {\n      return b.weight - a.weight;\n    })[0];\n\n    if (SelectedRenderer && SelectedRenderer !== undefined) {\n      setCurrentRenderer(function () {\n        return SelectedRenderer;\n      });\n    } else {\n      setCurrentRenderer(null);\n    }\n  }, [currentDocument]);\n  return {\n    CurrentRenderer: CurrentRenderer\n  };\n};","map":null,"metadata":{},"sourceType":"script"}