{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useDocumentLoader = void 0;\n\nvar react_1 = require(\"react\");\n\nvar state_1 = require(\"../state\");\n\nvar actions_1 = require(\"../state/actions\");\n\nvar fileLoaders_1 = require(\"./fileLoaders\");\n\nvar useRendererSelector_1 = require(\"./useRendererSelector\");\n/**\n * Custom Hook for loading the current document into context\n */\n\n\nexports.useDocumentLoader = function () {\n  var _a = react_1.useContext(state_1.DocViewerContext),\n      state = _a.state,\n      dispatch = _a.dispatch;\n\n  var currentFileNo = state.currentFileNo,\n      currentDocument = state.currentDocument;\n  var CurrentRenderer = useRendererSelector_1.useRendererSelector().CurrentRenderer;\n  var documentURI = (currentDocument === null || currentDocument === void 0 ? void 0 : currentDocument.uri) || \"\";\n  react_1.useEffect(function () {\n    if (!currentDocument) return;\n    if (currentDocument.fileType !== undefined) return;\n    var controller = new AbortController();\n    var signal = controller.signal;\n    fetch(documentURI, {\n      method: \"HEAD\",\n      signal: signal\n    }).then(function (response) {\n      var contentTypeRaw = response.headers.get(\"content-type\");\n      var contentTypes = (contentTypeRaw === null || contentTypeRaw === void 0 ? void 0 : contentTypeRaw.split(\";\")) || [];\n      var contentType = contentTypes.length ? contentTypes[0] : undefined;\n      dispatch(actions_1.updateCurrentDocument(__assign(__assign({}, currentDocument), {\n        fileType: contentType || undefined\n      })));\n    });\n    return function () {\n      controller.abort();\n    };\n  }, // eslint ignore added, because a warning appears for dispatch to\n  // be a dependancy of the useEffect\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [currentFileNo, documentURI]);\n  react_1.useEffect(function () {\n    var _a;\n\n    if (!currentDocument || CurrentRenderer === undefined) return;\n    var controller = new AbortController();\n    var signal = controller.signal;\n\n    var fileLoaderComplete = function fileLoaderComplete(fileReader) {\n      if (!currentDocument || !fileReader) {\n        dispatch(actions_1.setDocumentLoading(false));\n        return;\n      }\n\n      var updatedDocument = __assign({}, currentDocument);\n\n      if (fileReader.result !== null) {\n        updatedDocument.fileData = fileReader.result;\n      }\n\n      dispatch(actions_1.updateCurrentDocument(updatedDocument));\n      dispatch(actions_1.setDocumentLoading(false));\n    };\n\n    if (CurrentRenderer === null) {\n      dispatch(actions_1.setDocumentLoading(false));\n    } else if (CurrentRenderer.fileLoader !== undefined) {\n      (_a = CurrentRenderer.fileLoader) === null || _a === void 0 ? void 0 : _a.call(CurrentRenderer, {\n        documentURI: documentURI,\n        signal: signal,\n        fileLoaderComplete: fileLoaderComplete\n      });\n    } else {\n      fileLoaders_1.defaultFileLoader({\n        documentURI: documentURI,\n        signal: signal,\n        fileLoaderComplete: fileLoaderComplete\n      });\n    }\n\n    return function () {\n      controller.abort();\n    };\n  }, [CurrentRenderer]);\n  return {\n    state: state,\n    dispatch: dispatch,\n    CurrentRenderer: CurrentRenderer\n  };\n};","map":null,"metadata":{},"sourceType":"script"}